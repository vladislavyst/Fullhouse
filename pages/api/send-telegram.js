// Vercel Serverless Function –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
module.exports = async (req, res) => {
  // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    console.log('Invalid method:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('Received request body:', req.body);
    const { name, phone, comment } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !phone) {
      console.log('Missing required fields:', { name: !!name, phone: !!phone });
      return res.status(400).json({ error: 'Name and phone are required' });
    }

    // Telegram Bot Token - –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8430823667:AAEhuKe7X8vgs3SsB44dmtYjqjz7rlWMyoE';
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '546005770';

    console.log('Environment check:', {
      hasToken: !!BOT_TOKEN,
      hasChat: !!CHAT_ID,
      tokenLength: BOT_TOKEN ? BOT_TOKEN.length : 0,
      usingFallback: !process.env.TELEGRAM_BOT_TOKEN
    });

    if (!BOT_TOKEN || !CHAT_ID) {
      console.error('Missing Telegram credentials');
      return res.status(500).json({ 
        error: 'Server configuration error',
        details: 'Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID'
      });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `üè† *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Fullhouse*

üë§ *–ò–º—è:* ${name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })}`;

    console.log('Sending message to Telegram...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      }
    );

    const telegramData = await telegramResponse.json();

    console.log('Telegram API response:', {
      ok: telegramResponse.ok,
      status: telegramResponse.status,
      data: telegramData
    });

    if (!telegramResponse.ok) {
      console.error('Telegram API error:', telegramData);
      return res.status(500).json({
        error: 'Failed to send to Telegram',
        telegramError: telegramData,
        status: telegramResponse.status
      });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log('Message sent successfully to Telegram');
    return res.status(200).json({ 
      success: true, 
      message: 'Order sent successfully',
      messageId: telegramData.result?.message_id
    });

  } catch (error) {
    console.error('Error sending order:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};