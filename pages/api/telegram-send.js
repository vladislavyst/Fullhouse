// CommonJS –≤–µ—Ä—Å–∏—è –¥–ª—è 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel
const https = require('https');
const querystring = require('querystring');

module.exports = async (req, res) => {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method === 'GET') {
    return res.status(200).json({ 
      status: 'CommonJS API —Ä–∞–±–æ—Ç–∞–µ—Ç',
      timestamp: new Date().toISOString(),
      method: 'GET'
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã' });
  }

  try {
    const { name, phone, comment } = req.body;

    if (!name || !phone) {
      return res.status(400).json({ 
        error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 
        received: { name: !!name, phone: !!phone }
      });
    }

    // –ü—Ä—è–º—ã–µ –∫–ª—é—á–∏
    const BOT_TOKEN = '8430823667:AAEhuKe7X8vgs3SsB44dmtYjqjz7rlWMyoE';
    const CHAT_ID = '546005770';

    const message = `üè† –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê FULLHOUSE

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })}`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π https –º–æ–¥—É–ª—å Node.js
    const postData = querystring.stringify({
      chat_id: CHAT_ID,
      text: message
    });

    const options = {
      hostname: 'api.telegram.org',
      path: `/bot${BOT_TOKEN}/sendMessage`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const telegramResult = await new Promise((resolve, reject) => {
      const req = https.request(options, (response) => {
        let data = '';
        
        response.on('data', (chunk) => {
          data += chunk;
        });
        
        response.on('end', () => {
          try {
            const result = JSON.parse(data);
            resolve({ statusCode: response.statusCode, result });
          } catch (error) {
            reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Telegram'));
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.write(postData);
      req.end();
    });

    if (telegramResult.statusCode === 200 && telegramResult.result.ok) {
      return res.status(200).json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!',
        telegramResponse: telegramResult.result,
        sentData: { name, phone, comment }
      });
    } else {
      return res.status(500).json({
        error: 'Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É',
        telegramError: telegramResult.result,
        statusCode: telegramResult.statusCode
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    return res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};
