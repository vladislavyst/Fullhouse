import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –ö–ë
function getFileSizeInKB(filePath) {
  const stats = fs.statSync(filePath);
  return Math.round(stats.size / 1024);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function findLargeImages(dir, threshold = 500) {
  const largeImages = [];
  
  function scanDirectory(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const itemPath = path.join(currentDir, item);
      const stat = fs.statSync(itemPath);
      
      if (stat.isDirectory()) {
        scanDirectory(itemPath);
      } else if (stat.isFile()) {
        const ext = path.extname(item).toLowerCase();
        if (['.jpg', '.jpeg', '.png', '.gif'].includes(ext)) {
          const sizeKB = getFileSizeInKB(itemPath);
          if (sizeKB > threshold) {
            const relativePath = path.relative(path.join(__dirname, '..'), itemPath);
            largeImages.push({
              path: relativePath,
              size: sizeKB,
              url: `http://sk-fullhouse.com/${relativePath.replace(/\\/g, '/')}`
            });
          }
        }
      }
    }
  }
  
  scanDirectory(dir);
  return largeImages;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function analyzeImages() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  const publicDir = path.join(__dirname, '..', 'public');
  const largeImages = findLargeImages(publicDir, 500);
  
  if (largeImages.length === 0) {
    console.log('‚úÖ –ë–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (>500KB) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
  largeImages.sort((a, b) => b.size - a.size);
  
  console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${largeImages.length} –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n`);
  
  largeImages.forEach((img, index) => {
    console.log(`${index + 1}. ${img.path}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${img.size} –ö–ë`);
    console.log(`   URL: ${img.url}`);
    console.log('');
  });
  
  console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  console.log('1. –°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 300-500 –ö–ë');
  console.log('2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WebP —Ñ–æ—Ä–º–∞—Ç');
  console.log('3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É');
  console.log('4. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã width/height –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è CLS');
  
  // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è Vercel headers
  console.log('\nüìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è vercel.json:');
  console.log(`
{
  "source": "/(.*\\\\.(jpg|jpeg|png|gif|webp|avif|svg))",
  "headers": [
    {
      "key": "Cache-Control",
      "value": "public, max-age=31536000, immutable"
    },
    {
      "key": "Vary",
      "value": "Accept"
    }
  ]
}
  `);
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeImages();
